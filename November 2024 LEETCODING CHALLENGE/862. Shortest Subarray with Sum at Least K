862. Shortest Subarray with Sum at Least K

Given an integer array nums and an integer k, return the length of the shortest non-empty subarray of nums with a sum of at least k. If there is no such subarray, return -1.

A subarray is a contiguous part of an array.

Code:

class Solution {
  public int shortestSubarray(int[] nums, int k) {
    final int n = nums.length;
    int ans = n + 1;
    Deque<Integer> dq = new ArrayDeque<>();
    long[] prefix = new long[n + 1];

    for (int i = 0; i < n; ++i)
      prefix[i + 1] = (long) nums[i] + prefix[i];

    for (int i = 0; i < n + 1; ++i) {
      while (!dq.isEmpty() && prefix[i] - prefix[dq.getFirst()] >= k)
        ans = Math.min(ans, i - dq.pollFirst());
      while (!dq.isEmpty() && prefix[i] <= prefix[dq.getLast()])
        dq.pollLast();
      dq.addLast(i);
    }

    return ans <= n ? ans : -1;
  }
}

Time Complexity:

The time complexity of the given code is O(N), where N is the length of the input array nums.

Space Complexity:

The space complexity of the code is O(N), primarily due to the prefix array and the deque.
