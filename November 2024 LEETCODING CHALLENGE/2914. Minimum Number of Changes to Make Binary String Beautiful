2914. Minimum Number of Changes to Make Binary String Beautiful

You are given a 0-indexed binary string s having an even length.

A string is beautiful if it's possible to partition it into one or more substrings such that:

Each substring has an even length.
Each substring contains only 1's or only 0's.
You can change any character in s to 0 or 1.

Return the minimum number of changes required to make the string s beautiful.

Code:

class Solution {
  public int minChanges(String s) {
    int ans = 0;

    for (int i = 0; i + 1 < s.length(); i += 2)
      if (s.charAt(i) != s.charAt(i + 1))
        ++ans;

    return ans;
  }
}

The time complexity of the function minChanges is O(n), where n is the length of the string s. 

The space complexity is O(1).
