2807. Insert Greatest Common Divisors in Linked List

Given the head of a linked list head, in which each node contains an integer value.
Between every pair of adjacent nodes, insert a new node with a value equal to the greatest common divisor of them.
Return the linked list after insertion.
The greatest common divisor of two numbers is the largest positive integer that evenly divides both numbers.

CODE :


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

class Solution {
  // Function to insert the GCD between each pair of adjacent nodes in the list
  public ListNode insertGreatestCommonDivisors(ListNode head) {
    // Traverse the linked list
    for (ListNode curr = head; curr.next != null;) {
      // Calculate GCD of the current node value and the next node value
      ListNode inserted = new ListNode(gcd(curr.val, curr.next.val), curr.next);
      
      // Insert the new node containing the GCD between current and next nodes
      curr.next = inserted;
      
      // Move to the node after the newly inserted one
      curr = inserted.next;
    }
    return head; // Return the modified list
  }

  // Helper function to calculate the greatest common divisor (GCD) using recursion
  private int gcd(int a, int b) {
    // Base case: if b is 0, return a; otherwise, recursively find the GCD
    return b == 0 ? a : gcd(b, a % b);
  }
}


Summary of Time and Space Complexity:

1. Time Complexity:  
   - The algorithm iterates over the linked list once, performing GCD calculations between each pair of adjacent nodes. The time complexity of each GCD calculation is logarithmic, i.e., `O(log(min(a, b)))`, where `a` and `b` are the values of the adjacent nodes.
   - Overall, the time complexity is:
        O(nâ‹…log(min(a,b)))
   
   where `n` is the number of nodes in the linked list.

2. Space Complexity:  
   - The algorithm uses `O(log(\min(a, b)))` auxiliary space due to the recursive nature of the Euclidean GCD function. The additional nodes inserted in the linked list are part of the output, so they don't count as extra auxiliary space.
   - Overall, the space complexity is:
     O(log(min(a,b)))
  
