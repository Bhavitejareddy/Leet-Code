3043. Find the Length of the Longest Common Prefix


You are given two arrays with positive integers arr1 and arr2.

A prefix of a positive integer is an integer formed by one or more of its digits, starting from its leftmost digit. For example, 123 is a prefix of the integer 12345, while 234 is not.

A common prefix of two integers a and b is an integer c, such that c is a prefix of both a and b. For example, 5655359 and 56554 have a common prefix 565 while 1223 and 43456 do not have a common prefix.

You need to find the length of the longest common prefix between all pairs of integers (x, y) such that x belongs to arr1 and y belongs to arr2.

Return the length of the longest common prefix among all pairs. If no common prefix exists among them, return 0.


Code: 


class TrieNode {
  public TrieNode[] children = new TrieNode[10];
}

class Trie {
  public void insert(final String word) {
    TrieNode node = root;
    for (final char c : word.toCharArray()) {
      final int i = c - '0';
      if (node.children[i] == null)
        node.children[i] = new TrieNode();
      node = node.children[i];
    }
  }

  public int search(final String word) {
    int prefixLength = 0;
    TrieNode node = root;
    for (final char c : word.toCharArray()) {
      final int i = c - '0';
      if (node.children[i] == null)
        break;
      node = node.children[i];
      ++prefixLength;
    }
    return prefixLength;
  }

  private TrieNode root = new TrieNode();
}

class Solution {
  public int longestCommonPrefix(int[] arr1, int[] arr2) {
    int ans = 0;
    Trie trie = new Trie();

    for (final int num : arr1)
      trie.insert(Integer.toString(num));

    for (final int num : arr2)
      ans = Math.max(ans, trie.search(Integer.toString(num)));

    return ans;
  }
}



Time Complexity:

    Insert operation: O(n⋅dmax)O(n⋅dmax​)
    Search operation: O(m⋅dmax)O(m⋅dmax​)
    Total: O((n+m)⋅dmax)O((n+m)⋅dmax​)

Where:

    nn = number of elements in arr1
    mm = number of elements in arr2
    dmaxdmax​ = maximum number of digits in the numbers

Space Complexity:

    Trie space: O(n⋅dmax)O(n⋅dmax​)
    String conversion: O((n+m)⋅dmax)O((n+m)⋅dmax​)
    Total: O(n⋅dmax)O(n⋅dmax​) (dominated by the Trie structure)