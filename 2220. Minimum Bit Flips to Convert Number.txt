2220. Minimum Bit Flips to Convert Number



A bit flip of a number x is choosing a bit in the binary representation of x and flipping it from either 0 to 1 or 1 to 0.

    For example, for x = 7, the binary representation is 111 and we may choose any bit (including any leading zeros not shown) and flip it. We can flip the first bit from the right to get 110, flip the second bit from the right to get 101, flip the fifth bit from the right (a leading zero) to get 10111, etc.

Given two integers start and goal, return the minimum number of bit flips to convert start to goal.


CODE:

    class Solution {
  // Function to return the minimum number of bit flips to convert 'start' to 'goal'
  public int minBitFlips(int start, int goal) {
    // XOR operation between 'start' and 'goal' will give a number where each bit is 1
    // if the corresponding bits in 'start' and 'goal' are different.
    // The Integer.bitCount() function returns the number of 1s in the binary representation of that number.
    return Integer.bitCount(start ^ goal);
  }
}



Time Complexity:

    O(1): Both the XOR operation and the bit count function run in constant time since they operate on 32-bit integers.

Space Complexity:

    O(1): The function only uses a fixed amount of memory, regardless of input size.